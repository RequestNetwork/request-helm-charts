{{- if (not (empty .Values.nodeEnv.mnemonic)) }}
{{- else }}
########################################################################
####   ERROR: You did not set the Ethereum Mnemonic for the Node.   ####
########################################################################

The node will not be able to run without a valid mnemonic key.
Example:
  helm upgrade {{ .Release.Name }} \
    --set nodeEnv.mnemonic="candy maple cake sugar pudding cream honey rich smooth crumble sweet treat" \ 
    request/request-node

{{- end }}

{{- if (not (empty .Values.nodeEnv.web3ProviderUrl)) }}
{{- else }}
########################################################################
####   ERROR: You did not set the web3 provider url for the Node.   ####
########################################################################

The node will not be able to run without a valid web3 provider URL.
Example:
  helm upgrade {{ .Release.Name }} \
    --set nodeEnv.web3ProviderUrl="https://mainnet.infura.io/v3/YOUR-PROJECT-ID" \
    request/request-node
{{- end }}

{{- if (not (empty .Values.nodeEnv.networkId)) }}
{{- else }}
########################################################################
####   ERROR: You did not set the ethereum network for the Node.    ####
########################################################################

The node will not be able to run without a valid network id (chain id).
Example:
  helm upgrade {{ .Release.Name }} --set nodeEnv.networkId="4" request/request-node
{{- end }}


1. Get the application URL by running these commands:
{{- if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "request-node.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "request-node.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "request-node.fullname" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "request-node.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl port-forward $POD_NAME 8080:{{ .Values.service.port }}
{{- end }}
