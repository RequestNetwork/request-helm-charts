apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "request-ipfs.fullname" . }}
  labels:
{{ include "request-ipfs.labels" . | indent 4 }}
spec:
  serviceName: {{ .Chart.Name }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
{{ include "request-ipfs.labels" . | indent 6 }}
  template:
    metadata:
      labels:
{{ include "request-ipfs.labels" . | indent 8 }}
    spec:
      securityContext:
        # The image runs as uid 1000 by default, and needs to be able to write to the persistent volume to be able to start.
        fsGroup: 1000
        runAsUser: 1000

      containers:
      - name: ipfs
        image: "{{ .Values.image.image }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        livenessProbe:
          tcpSocket:
            port: swarm
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        readinessProbe:
          tcpSocket:
            port: swarm
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        ports:
        - containerPort: {{ .Values.swarm.port }}
          name: swarm
        - containerPort: {{ .Values.api.port }}
          name: api
        volumeMounts:
        - name: ipfs-storage
          mountPath: /data/ipfs
        env:
        # Forces the IPFS node to connect to the Request dedicated network
        - name: LIBP2P_FORCE_PNET
          value: "1"
        {{- if .Values.swarm.port }}
        - name: SWARM_PORT
          value: {{ .Values.swarm.port | quote }}
        {{- end }}
        {{- if .Values.identity }}
        - name: PEER_ID
          value: {{ .Values.identity.peerId | quote }}
        - name: PRIVATE_KEY
          valueFrom:
              secretKeyRef:
                name: {{ include "request-ipfs.fullname" . }}-secret
                key: ipfsPrivateKey
        {{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}

    {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      
  volumeClaimTemplates:
  # IPFS storage volume
  - metadata:
      name: ipfs-storage
      labels:
        app.kubernetes.io/name: {{ include "request-ipfs.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      {{- range $key, $value := .Values.persistence.annotations }}
        {{ $key }}: {{ $value }}
      {{- end }}
    spec:
      accessModes:
        {{- range .Values.persistence.accessModes }}
        - {{ . | quote }}
        {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote }}
    {{- if .Values.persistence.storageClass }}
    {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: "{{ .Values.persistence.storageClass }}"
    {{- end }}
    {{- end }}
